rule mimikatz_sekurlsa {
    strings:
        $s1 = { 33 DB 8B C3 48 83 C4 20 5B C3 }
        $s2 = {83 64 24 30 00 44 8B 4C 24 48 48 8B 0D}
        $s3 = {83 64 24 30 00 44 8B 4D D8 48 8B 0D}
        $s4 = {84 C0 74 44 6A 08 68}
        $s5 = {8B F0 3B F3 7C 2C 6A 02 6A 10 68}
        $s6 = {8B F0 85 F6 78 2A 6A 02 6A 10 68}

    condition:
        all of them
}

rule mimikatz_decryptkeysign {
    strings:
        $s1 = { F6 C2 07 0F 85 0D 1A 02 00 }
        $s2 = { F6 C2 07 0F 85 72 EA 01 00 }
        $s3 = { 4C 8B CB 48 89 44 24 30}
        $s4 = { 4c 89 1b 48 89 43 08 49 89 5b 08 48 8d }

    condition:
        3 of them
}

rule ngrok_binaries {
  strings:
    $s1 = "ngrok" fullword
    $s2 = "go.ngrok.com"
    $s3 = "https://s3.amazonaws.com/dns.ngrok.com/tunnel.json"
    $s4 = "ngrokService"
    $s5 = "HTTPRoundTrip_KeyVal"
	$s6 = "ng.exe"
  condition:
    (
      uint16(0) == 0x5a4d
    ) and
    (3 of ($s*))
}


rule Cobalt_functions
{

    meta:
	
        description="Detect functions coded with ROR edi,D; Detect CobaltStrike used by differents groups APT"

    strings:
        $h1={58 A4 53 E5} // VirtualAllocEx
        $h2={4C 77 26 07} // LoadLibraryEx
        $h3={6A C9 9C C9} // DNSQuery_UTF8
        $h4={44 F0 35 E0} // Sleep
        $h5={F4 00 8E CC} // lstrlen
    condition:
        2 of ( $h* )
}


rule GEN_PowerShell 
{

    meta:
        description = "Generic PowerShell Malware Rule"
    
    strings:
        $s1 = "powershell"
        $s2 = "-ep bypass" nocase
        $s3 = "-nop" nocase
        $s10 = "-executionpolicy bypass" nocase
        $s4 = "-win hidden" nocase
        $s5 = "-windowstyle hidden" nocase
        $s11 = "-w hidden" nocase
        /*$s6 = "-noni" fullword ascii*/
        /*$s7 = "-noninteractive" fullword ascii*/
        $s8 = "-enc" nocase
        $s9 = "-encodedcommand" nocase
    
    condition:
        $s1 and (($s2 or $s3 or $s10) and ($s4 or $s5 or $s11) and ($s8 or $s9))
}


rule lateral_movement
{ 
	meta:
		date = "3/12/2014"
		author = "https://github.com/reed1713"
    description = "methodology sig looking for signs of lateral movement"
	strings:
		$type="Microsoft-Windows-Security-Auditing"
		$eventid="4688"
		$data="PsExec.exe"
		$type1="Microsoft-Windows-Security-Auditing"
		$eventid1="4688"
		$data1="Windows\\System32\\net.exe"
		$type2="Microsoft-Windows-Security-Auditing"
		$eventid2="4688"
		$data2="Windows\\System32\\at.exe"
	condition:
		($type and $eventid and $data) or ($type1 and $eventid1 and $data1) or ($type2 and $eventid2 and $data2)
}





rule AnyDesk_suspecte_binaries {
  strings:
    $s1 = "AnyDesk" fullword

    condition:
        all of them
}


rule nssm_suspecte_binaries {
  strings:
    $s1 = "nssm.exe" 

    condition:
        all of them
}

rule AutoIt_suspecte_binaries {
  strings:
    $s1 = "AutoIt.exe"

    condition:
        all of them
}

rule Advanced_IP_Scanner_suspecte_binaries {
  strings:
    $s1 = "Advanced_IP_Scanner.exe"

    condition:
        all of them
}

rule Cain_suspecte_binaries {
  strings:
    $s1 = "Cain.exe"

    condition:
        all of them
}

rule mimi_suspecte_binaries {
  strings:
    $s1 = "mimi.exe"

    condition:
        all of them
}

rule Mimikatz_suspecte_binaries {
  strings:
    $s1 = "Mimikatz.exe"

    condition:
        all of them
}

rule bloodhound_suspecte_binaries {
  strings:
    $s1 = "bloodhound"

    condition:
        all of them
}

rule PSEXEC_suspecte_binaries {
  strings:
    $s1 = "PSEXEC.exe"

    condition:
        all of them
}

rule VNCViewer_suspecte_binaries {
  strings:
    $s1 = "VNCViewer"

    condition:
        all of them
}

rule CleanWipe_suspecte_binaries {
  strings:
    $s1 = "CleanWipe"

    condition:
        all of them
}

rule lcagent_suspecte_binaries {
  strings:
   $s1 = "lcagent"

    condition:
        all of them
}

rule dwrcs_suspecte_binaries {
  strings:
    $s1 = "dwrcs.exe"

    condition:
        all of them
}

rule Sharp_suspecte_binaries {
  strings:
    $s1 = "Sharp.exe"

    condition:
        all of them
}

rule SharpZeroLogon_suspecte_binaries {
  strings:
    $s1 = "SharpZeroLogon.exe"

    condition:
        all of them
}

rule D_Sym_suspecte_binaries {
  strings:
    $s1 = "D_Sym.exe"

    condition:
        all of them
}

rule delfunktionerne_suspecte_binaries {
  strings:
    $s1 = "delfunktionerne.exe"

    condition:
        all of them
}

rule OVH_suspecte_binaries {
  strings:
    $s1 = "OVH.exe"

    condition:
        all of them
}

rule audios_suspecte_binaries {
  strings:
    $s1 = "audios.exe"

    condition:
        all of them
}

rule opt_suspecte_binaries {
  strings:
    $s1 = "opt.exe"

    condition:
        all of them
}

rule beacon_suspecte_binaries {
  strings:
    $s1 = "beacon.exe"

    condition:
        all of them
}

rule OLUX_suspecte_binaries {
  strings:
    $s1 = "OLUX.exe"

    condition:
        all of them
}

rule artifact_suspecte_binaries {
  strings:
    $s1 = "artifact.exe"

    condition:
        all of them
}

rule InterChased_suspecte_binaries {
  strings:
    $s1 = "InterChased.exe"

    condition:
        all of them
}

rule bluetooth_suspecte_binaries {
  strings:
    $s1 = "bluetooth.exe"

    condition:
        all of them
}

rule ca_setup_suspectes_binaries {
  strings:
    $s1 = "ca_setup.exe"

    condition:
        all of them
}

rule ca1_suspecte_binaries {
  strings:
    $s1 = "ca1.exe"

    condition:
        all of them
}

rule IP_suspecte_binaries {
  strings:
    $s1 = "20.7.14.99"

    condition:
        all of them
}

rule Abel_suspecte_binaries {
  strings:
    $s1 = "Abel.exe"

    condition:
        all of them
}


rule TeamViewer_suspecte_binaries {
  strings:
    $s1 = "TeamViewer"

    condition:
        all of them 
}

rule WebexService_suspecte_binaries {
  strings:
    $s1 = "WebexService.exe"

    condition:
        all of them
}

rule cobaltStrike_suspecte_binaries {
  strings:
    $s1 = "cobaltStrike"

    condition:
        all of them
}



rule PE_with_PsExec {
  strings:
    $mz = { 4D 5A } // "MZ" header of PE files
    $psexec = "PsExec" nocase

  condition:
    $mz at 0 and $psexec
}


rule OneDriveContent {
  strings:
    $mz = { 4D 5A } // "MZ" header of PE files
    $OneDrive = "OneDrive.exe" 

  condition:
    $mz at 0 and $OneDrive
}


rule sysinformation_exe {
  strings:
    $s1 = "sysinformation.exe" nocase

    condition:
        all of them
}


